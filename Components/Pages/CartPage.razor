@page "/cart"
@rendermode InteractiveServer

<PageTitle>Корзина</PageTitle>

<main class="main d-flex justify-content-center">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <div class="container">
                    <div class="row cart-title">
                        <h3>Товары в вашей корзине</h3>
                    </div>
                    <div class="row">
                        <div class="col-md-10 card card-item">
                            @if (CartUserList?.Count > 0)
                            {
                                @foreach (var cart in CartUserList)
                                {
                                    <div class="card-body card-item-body">
                                        <div class="row row-cart">
                                            <div class="col-md-3 col-img-product">
                                                <a class="cart-item-img" href="/product-info/@cart.Product.Id">
                                                    <img class="product-img" src="/img/products/@cart.Product.SrcImageProduct" alt="@cart.Product.Title">
                                                </a>
                                            </div>
                                            <div class="col-md-3 col-description-product">
                                                <h1 class="cart-item-title">@cart.Product.Title @cart.Product.Weight<span style="font-size: 15px;"> г</span></h1>
                                                <p class="cart-item-subtitle">@cart.Product.Subtitle</p>
                                            </div>
                                            <div class="col-md-3 cost-product">
                                                <p>Цена за 1 шт.<br /><span class="cost-product-text">@cart.Product.Price</span><span style="font-weight: 400;"> BYN</span></p>
                                            </div>
                                            <div class="col-md-3 col-counter">
                                                <div class="counter">
                                                    <input class="counter-text" type="number" step="1" min="1" name="count" value="1">
                                                    <button class="counter-minus" disabled>−</button>
                                                    <button class="counter-plus">+</button>
                                                </div>

                                                <div class="quantity">
                                                    <p class="quantity-product">Осталось <span class="quantity-product-text">@cart.Product.Count</span> шт.</p>
                                                </div>
                                                <div class="btn-remove">
                                                    <button @onclick="()=>DeleteCartProduct(cart.Id)" class="btn btn-danger">Убрать из корзины</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="col-md-2">
                            <div class="row cart-footer">
                                <div class="col-md-12 d-flex justify-content-end total-cost">
                                    <p>Итого: <span class="total-price">@ProductPrice</span> BYN</p>
                                </div>
                                <div class="col-md-12 d-flex justify-content-center">
                                    <button class="btn btn-pay">Оплатить товары</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <Login />
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>

</main>

@code {
    private List<System.Security.Claims.Claim> ClaimsList = new();
    private ApplicationUser User = new();
    private List<Product>? ProductsList { get; set; } = new();
    private List<Cart>? CartUserList { get; set; } = new();
    private decimal ProductPrice;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("counter");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            var authState = customAuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.Result.User;
            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                ClaimsList = authState.Result.User.Claims.ToList();
                var Email = ClaimsList[1].Value;
                User = await account.GetUser(Email);
            }
            await GetCartProduct(User.Id);
        }
        catch { }
    }

    private async Task GetCartProduct(Guid userId)
    {
        CartUserList = await cartService.GetCartByIdUserAsync(userId);
    }

    private async Task DeleteCartProduct(Guid cartId)
    {
        await cartInterface.DeleteCartProductAsync(cartId);
        NavManager.Refresh(forceReload:true);
    }
}