@page "/products"
@rendermode InteractiveServer

<PageTitle>Товары</PageTitle>

<main class="main d-flex justify-content-center">
    <div class="container">
        @if (ProductsList!.Count > 0)
        {
            <div class="row">
                <div class="row row-btn">
                    <div class="col-sm mt-3">
                        <div class="d-flex btn-group " role="group">
                            <div class="d-flex group-btn">
                                <button onclick="clearSearch()" class="btn item-btn">Все</button>
                                @foreach (var title in uniqueProductNames!)
                                {
                                    <button onclick="searchProducts(@title.Replace(" ", "_"))" class="btn item-btn">@title</button>
                                }
                            </div>
                        </div>
                    </div>
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <div class="col-sm col-btn justify-content-center mt-3">
                                <a href="/add-product" class="btn btn-warning col-btn"><span>+ </span>Добавить товар</a>
                            </div>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
            @foreach (var title in uniqueProductNames)
            {
                <div class="page-products" id="@title.Replace(" ", "_")">
                    <h2 class="page-title">@title</h2>
                    <div class="row row-cols-1 row-cols-md-2 g-4">
                        @foreach (var product in ProductsList.Where(p => p.Title == title).OrderBy(p => p.Weight))
                        {
                            <div class="col col-md-4 col-sm-4">
                                <div class="card card-product">
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <div class="control-btn-div">
                                                <button @onclick="()=>UpdateProduct(product.Id)" title="Редактировать товар" class="btn btn-warning control-btn">&#9999;&#65039;</button>
                                                <button @onclick="()=>ShowDialogAsync(product.Id)" title="Удалить товар" class="btn btn-danger control-btn">X</button>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                    <a class="card-product-link" href="/product-info/@product.Id">
                                        @if(product.SrcImageProduct is null)
                                        {
                                            <img src="/img/products/no-foto.png" class="card-img-top product-img" alt="@product.Title @product.Subtitle">
                                        }
                                        else
                                        {
                                            <img src="/img/products/@product.SrcImageProduct" class="card-img-top product-img" alt="@product.Title @product.Subtitle">
                                        }
                                    </a>
                                    <div class="card-body card-body-product">
                                        <div class="col-md-6">
                                            <a href="/product-info/@product.Id">
                                                <p class="product-title">@product.Title</p>
                                                <p class="product-subtitle">@product.Subtitle</p>
                                            </a>
                                        </div>
                                        <div class="col-md-6">
                                            <p class="product-weight"><b>@product.Weight <span>г</span></b></p>
                                        </div>
                                    </div>
                                    <AuthorizeView>
                                        <Authorized>
                                            <div class="btn-product">
                                                <div class="col-md-12">
                                                    <button @onclick="()=>AddToCart(product.Id)" title="Добавить товар в корзину" class="btn btn-warning">Добавить в корзину</button>
                                                </div>
                                            </div>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            <ConfirmDialog @ref="dialog" />
        }
        else if(User.Role == "Admin")
        {
            <div class="row row-btn justify-content-center">
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <a href="/add-product" class="btn btn-warning col-btn" style="width: 180px;"><span>+ </span>Добавить товар</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        }
        else
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Загрузка товаров...</span>
                </div>
            </div>
        }
    </div>
</main>

@code{
    private List<Product>? ProductsList { get; set; } = new();
    private List<string>? ProductTitleList { get; set; } = new();
    private IEnumerable<string>? uniqueProductNames { get; set; }
    private ConfirmDialog dialog = default!;

    private List<System.Security.Claims.Claim> ClaimsList = new();
    private ApplicationUser User = new();

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("searchProducts");
            await js.InvokeVoidAsync("clearSearch");
        }
        else
        {
            await js.InvokeVoidAsync("searchProducts");
            await js.InvokeVoidAsync("clearSearch");
        }
    }

    private async Task ShowDialogAsync(Guid id)
    {
        var options = new ConfirmDialogOptions 
        { 
            IsVerticallyCentered = true,
            YesButtonText = "Да",
            YesButtonColor = ButtonColor.Danger,
            NoButtonText = "Нет"
        };
        var confirmation = await dialog.ShowAsync(
            title: "Удаление товара",
            message1: "Действительно хотите удалить товар?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            await DeleteProduct(id);
        }
    }

    private async Task LoadProduct()
    {
        var products = await productService.GetAllProductsAsync();
        ProductsList?.Clear();
        if (products is null) return;
        foreach(var product in products)
        {
            ProductsList?.Add(product);
            ProductTitleList?.Add(product.Title);
        }
        uniqueProductNames = ProductTitleList?.Distinct().OrderBy(t => t);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
        await GetUser();
    }

    private async Task UpdateProduct(Guid id)
    {
        NavManager.NavigateTo($"/update-product/{id}");
    }

    private async Task DeleteProduct(Guid idProduct)
    {
        var checkProductCart = await cartInterface.GetCartProductByIdAsync(idProduct);
        if(checkProductCart is false)
        {
            await productInterface.DeleteProductAsync(idProduct);
        }
        await LoadProduct();
        NavManager.Refresh(forceReload: true);
    }

    private async Task AddToCart(Guid productId)
    {
        if(productId != Guid.Empty)
        {
            var product = await productService.GetProductByIdAsync(productId);
            var userApp = await GetUser();
            if (userApp is not null)
            {
                await cartInterface.AddCartProductAsync(userApp.Id, product.Id, 1);
            }
        }
        NavManager.Refresh(forceReload: true);
    }

    private async Task<ApplicationUser> GetUser()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = customAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.Result.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            ClaimsList = authState.Result.User.Claims.ToList();
            var Email = ClaimsList[1].Value;
            User = await account.GetUser(Email);
            return User;
        }
        return null!;
    }
}