@page "/registration"

<PageTitle>Страница регистрации</PageTitle>
@rendermode InteractiveServer
<main class="main d-flex justify-content-center">
    <div class="container">
        <div class="row">
            <div class="d-flex justify-content-center align-content-center">
            <EditForm Model="@RegisterDto" OnValidSubmit="RegisterClicked">
                    <h2 class="text-center">Форма регистрации</h2>
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="form-label">Имя</label>
                    <InputText @bind-Value="RegisterDto.Name" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">E-mail адрес</label>
                    <InputText @bind-Value="RegisterDto.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Пароль</label>
                    <InputText type="password" @bind-Value="RegisterDto.Password" class="form-control" typeof="password"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Подтвердите пароль</label>
                    <InputText type="password" @bind-Value="RegisterDto.ConfirmPassword" class="form-control"></InputText>
                </div>
                    <div class="text-center form-group mt-3">
                    <button class="btn btn-light btn-submit" type="submit">Зарегистрироваться</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>
</main>
@code{
    public RegisterDTO RegisterDto = new();

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = customAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.Result.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo("/", forceLoad: true);
        }
    }

    async Task RegisterClicked()
    {
        RegistrationResponse response = await accountService.RegisterAsync(RegisterDto);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            RegisterDto = new();
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        RegisterDto = new();
        await js.InvokeVoidAsync("alert", "Регистрация прошла успешно!");
        NavManager.NavigateTo("/login", forceLoad: true);
    }
}