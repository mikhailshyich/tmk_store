@page "/product-info"
@page "/product-info/{Id:guid}"
@using BlazorBootstrap


<main class="main d-flex justify-content-center">
    <div class="container">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="d-flex justify-content-center col-md-6 col-sm-12">
                        @if (Product.SrcImageProduct is null)
                        {
                            <img src="/img/products/no-foto.png" class="card-img-top product-img" alt="@Product.Title @Product.Subtitle">
                        }
                        else
                        {
                            <img class="post-image" src="/img/products/@Product.SrcImageProduct" alt="@Product.Title @Product.Subtitle">
                        }
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <div class="product-info-head">
                            <div class="row">
                                <div class="col-md-6">
                                    <h1 class="product-title">@Product.Title</h1>
                                    <p class="product-subtitle">@Product.Subtitle</p>
                                </div>
                                <div class="col-md-3 text-center product-info-weight">
                                    <p>@Product.Weight г</p>
                                </div>
                                <AuthorizeView>
                                    <Authorized>
                                        <div class="col-md-3 d-flex justify-content-end">
                                            <button @onclick="()=>AddToCart(Product.Id)" title="Добавить товар в корзину" class="btn btn-warning">
                                                <img src="/img/cart.png" width="25"/>
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                        <div class="product-info-descr">
                            <p class="product-descr">@Product.Description</p>
                        </div>
                        <div class="product-info-acc">
                            <Button Type="ButtonType.Button" class="accordion-button collapsed" @onclick="ToggleContentAsync"><u>Подробнее</u></Button>
                            <Collapse @ref="collapse1">
                                <Card>
                                    <CardBody>
                                        <p class="product-acc">@Product.StorageCondition</p>
                                    </CardBody>
                                </Card>
                            </Collapse>
                        </div>
                        <div class="product-info-parameters">
                            <p class="product-parameters">Пищевая и энергетическая ценность 100 г продукта</p>
                            <div class="product-info-items">
                                @foreach(var param in ParametersList)
                                {
                                    <div class="product-info-item">
                                        <p>@param</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="back-to-products">
            <Button @onclick="GoToProducts">&#060 Вернуться к товарам</Button>
        </div>
    </div>
</main>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private List<System.Security.Claims.Claim> ClaimsList = new();
    private ApplicationUser User = new();
    public Product Product { get; set; } = new();
    public List<string> ParametersList { get; set; } = new();

    Collapse collapse1 = default!;
    private async Task ToggleContentAsync() => await collapse1.ToggleAsync();

    private void GoToProducts()
    {
        NavManager.NavigateTo("/products");
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetProduct(Id);
    }

    private async Task GetProduct(Guid id)
    {
        Product = await productService.GetProductByIdAsync(id);
        ParametersList.Add($"белки {Product.Protein} г");
        ParametersList.Add($"жиры {Product.Fats} г");
        ParametersList.Add($"{Product.NutritionalValue} ккал");
        ParametersList.Add($"{Product.EnergyValue} кДж");
    }

    private async Task AddToCart(Guid productId)
    {
        if (productId != Guid.Empty)
        {
            var product = await productService.GetProductByIdAsync(productId);
            var userApp = await GetUser();
            if (userApp is not null)
            {
                await cartInterface.AddCartProductAsync(userApp.Id, product.Id, 1);
            }
        }
        NavManager.NavigateTo("/products", true);
    }

    private async Task<ApplicationUser> GetUser()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        var authState = customAuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.Result.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            ClaimsList = authState.Result.User.Claims.ToList();
            var Email = ClaimsList[1].Value;
            User = await account.GetUser(Email);
            return User;
        }
        return null!;
    }
}