
@page "/register"

@rendermode InteractiveServer
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Регистрация</h2>
            <EditForm Model="@RegisterDto" OnValidSubmit="RegisterClicked">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="form-label">Имя</label>
                    <InputText @bind-Value="RegisterDto.Name" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">E-mail адрес</label>
                    <InputText @bind-Value="RegisterDto.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Пароль</label>
                    <InputText type="password" @bind-Value="RegisterDto.Password" class="form-control" typeof="password"></InputText>
                </div>
                <div class="form-group mt-3">
                    <label class="form-label">Подтвердите пароль</label>
                    <InputText type="password" @bind-Value="RegisterDto.ConfirmPassword" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Регистрация</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code{
    public RegisterDTO RegisterDto = new();

    async Task RegisterClicked()
    {
        RegistrationResponse response = await accountService.RegisterAsync(RegisterDto);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            RegisterDto = new();
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        RegisterDto = new();
        return;
    }
}