@page "/login"

<PageTitle>Страница входа</PageTitle>

@rendermode InteractiveServer
<main class="main d-flex justify-content-center">
    <EditForm Model="@LoginDto" OnValidSubmit="LoginClicked">
        <h2 class="text-center">Форма входа</h2>
        <DataAnnotationsValidator />
        <div class="form-group">
            <label class="form-label">E-mail адрес</label>
            <InputText @bind-Value="LoginDto.Email" class="form-control"></InputText>
        </div>
        <div class="form-group mt-3">
            <label class="form-label">Пароль</label>
            <InputText type="password" @bind-Value="LoginDto.Password" class="form-control"></InputText>
        </div>
        <div class="text-center form-group mt-3">
            <button class="btn btn-light btn-submit" type="submit">Войти в личный кабинет</button>
        </div>

        <ValidationSummary />
    </EditForm>
</main>

@code{
    public LoginDTO LoginDto = new();

    async Task LoginClicked()
    {
        LoginResponse response = await accountService.LoginAsync(LoginDto);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}